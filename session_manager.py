import uuid
from huggingface_client import send_to_huggingface_api
from fastapi import  HTTPException
# In-memory session storage
user_sessions = {}

# Helper to generate session IDs
def generate_session_id():
    return str(uuid.uuid4())

# System prompt for simplifying reports
system_prompt = """
Consider me as a layman, a general person who doesn't have any knowledge of the medical field.
I have my medical report. What I would like from you is, I will give you the text of my report, 
the report contains many complex medical terms that I can't understand or any normal person cannot understand. 
So I want you to read the report, analyze it, and then give me a report which will be made by you in very simple terms and 
things which can be understood by me or any normal person.

The response from you should always start with a greeting and include only abnormalities. If the findings are all normal, state it briefly.
Format your response using markdown, and conclude with this disclaimer:

*"This report has been generated by artificial intelligence and is intended to provide a simplified explanation of your medical condition. However, it is always advisable to consult a healthcare professional for definitive diagnosis and treatment."*
"""

# Simplify report function
def simplify_report(report_text):
    """
    Takes the extracted text from a medical report and generates a simplified version.
    """
    try:
        simplified_report = send_to_huggingface_api([
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": report_text}
        ])
        session_id = generate_session_id()
        user_sessions[session_id] = report_text
        return {"session_id": session_id, "simplified_report": simplified_report}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error simplifying report: {str(e)}")

# Handle user question function
def handle_user_question(session_id, question):
    """
    Handles user queries related to the uploaded medical report.
    """
    if session_id not in user_sessions:
        raise HTTPException(status_code=404, detail="Session not found.")
    medical_report = user_sessions[session_id]
    question_input = f"Here is the medical report:\n\n{medical_report}\n\nQuestion: {question}"
    try:
        response = send_to_huggingface_api([
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": question_input}
        ])
        return response
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error handling question: {str(e)}")

# End session function
def end_session(session_id):
    """
    Ends a session and removes associated data.
    """
    if session_id not in user_sessions:
        raise HTTPException(status_code=404, detail="Session not found.")
    del user_sessions[session_id]
    return {"message": "Session ended and data cleared successfully."}
